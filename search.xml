<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GitHub-Hexo-搭建个人网站教程</title>
    <url>/2023/09/25/GitHub-Hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="GitHub-Hexo-搭建个人网站"><a href="#GitHub-Hexo-搭建个人网站" class="headerlink" title="GitHub+Hexo 搭建个人网站"></a>GitHub+Hexo 搭建个人网站</h1><p><strong>什么是Hexo？</strong><br>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。这里我们选用的是GitHub，你没看错，全球最大的同性恋交友网站（逃……）。</p>
<h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a><strong>搭建步骤：</strong></h2><ul>
<li>获得个人网站域名</li>
<li>GitHub创建个人仓库</li>
<li>安装Git</li>
<li>安装Node.js</li>
<li>安装Hexo</li>
<li>推送网站</li>
<li>绑定域名</li>
<li>更换主题</li>
<li>初识MarkDown语法</li>
<li>发布文章</li>
<li>最后</li>
</ul>
<p>  <br><br></p>
<h3 id="1-获得个人网站域名"><a href="#1-获得个人网站域名" class="headerlink" title="1.获得个人网站域名"></a><strong>1.获得个人网站域名</strong></h3><p>这个就不多说了，可以去腾讯云，或者阿里云买一个，也不贵，当然也可以不买，因为我们的网站是托管在github上门的，会有一个项目地址给你访问。</p>
<p>  <br>  <br>  </p>
<h3 id="2-GitHub创建个人仓库"><a href="#2-GitHub创建个人仓库" class="headerlink" title="2.GitHub创建个人仓库"></a><strong>2.GitHub创建个人仓库</strong></h3><p>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号，然后创建一个仓库，有一点要注意就是仓库名为：<strong>用户名</strong>.github.io这个<strong>用户名</strong>使用你的GitHub帐号名称代替，这是固定写法<br>  <br>  <br></p>
<h3 id="3-安装Git"><a href="#3-安装Git" class="headerlink" title="3.安装Git"></a><strong>3.安装Git</strong></h3><p>什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。<br>或者在菜单里搜索Git Bash，设置user.name和user.email配置信息：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>生成ssh密钥文件：  </p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>然后直接三个回车即可，默认不需要设置密码  </li>
<li>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</li>
<li>打开<a class="link"   href="https://link.zhihu.com/?target=https://github.com/settings/keys" >GitHub_Settings_keys <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 页面，新建new SSH Key</li>
<li>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。  </li>
<li>在Git Bash中检测GitHub公钥设置是否成功，输入 ssh <a class="link"   href="mailto:&#103;&#x69;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#x6d;" >&#103;&#x69;&#116;&#x40;&#103;&#x69;&#x74;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><br>  <br></li>
</ul>
<h3 id="4-安装Node-js"><a href="#4-安装Node-js" class="headerlink" title="4.安装Node.js"></a><strong>4.安装Node.js</strong></h3><p>Hexo基于Node.js，Node.js下载地址：<a class="link"   href="https://link.zhihu.com/?target=https://nodejs.org/en/download/" >Download | Node.js <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v<br>具体怎么安装可以看我的笔记里有<br>  <br>  <br></p>
<h3 id="5-安装Hexo"><a href="#5-安装Hexo" class="headerlink" title="5.安装Hexo"></a><strong>5.安装Hexo</strong></h3><p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。<br>使用npm命令安装Hexo，输入：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure></div>

<p>这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></div>
<p>注意，这里的命令都是<strong>作用在刚刚创建的Blog文件夹</strong>中。<br>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new test_my_site</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></div>
<p>这些命令在后面作介绍，完成后，打开浏览器输入地址：</p>
<p>localhost:4000</p>
<p>可以看出我们写出第一篇博客<br>现在来介绍常用的Hexo 命令  </p>
<p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客  </p>
<p>命令简写  </p>
<ul>
<li><p>hexo n “我的博客” &#x3D;&#x3D; hexo new “我的博客” #新建文章  </p>
</li>
<li><p>hexo g &#x3D;&#x3D; hexo generate #生成  </p>
</li>
<li><p>hexo s &#x3D;&#x3D; hexo server #启动服务预览  </p>
</li>
<li><p>hexo d &#x3D;&#x3D; hexo deploy #部署  </p>
</li>
<li><p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器  </p>
</li>
<li><p>hexo server -s #静态模式  </p>
</li>
<li><p>hexo server -p 5000 #更改端口  </p>
</li>
<li><p>hexo server -i 192.168.1.1 #自定义 IP  </p>
</li>
<li><p>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>
</li>
</ul>
<p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。<br>  <br>  <br></p>
<h3 id="6-推送网站"><a href="#6-推送网站" class="headerlink" title="6.推送网站"></a><strong>6.推送网站</strong></h3><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件<br>进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题</strong>配置文件</p>
<ul>
<li>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">type: git  </span><br><span class="line">repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上（.git）  </span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>保存站点配置文件。</p>
<p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>
<p>这时，我们分别输入三条命令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>

<p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a class="link"   href="https://link.zhihu.com/?target=http://xxxx.github.io" >http://xxxx.github.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 比如我的xxxx就是我的GitHub用户名</p>
<ul>
<li>这里我要重点说一点输入 hexo d 后会要求输入github的账号和密码，但是当我们输入密码后会出现不允许登录的情况，所以这里需要哦通过密钥登录</li>
</ul>
<p>你就会发现你的博客已经上线了，可以在网络上被访问了。<br>  <br>  <br></p>
<h3 id="7-绑定域名"><a href="#7-绑定域名" class="headerlink" title="7.绑定域名"></a><strong>7.绑定域名</strong></h3><p>虽然在Internet上可以访问我们的网站，但是网址是GitHub提供的:<a class="link"   href="https://link.zhihu.com/?target=http://xxxx.github.io" >http://xxxx.github.io <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 而我们想使用我们自己的个性化域名，这就需要绑定我们自己的域名。找到你的个性化域名</p>
<ul>
<li>进入解析</li>
<li>然后添加解析</li>
<li>记录类型为CNAME   </li>
<li>记录值是：<strong>你的用户名</strong>.github.io 这里千万别弄错了。</li>
</ul>
<p>第二步，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名然后保存</p>
<p>第三步，进入本地博客文件夹 ，进入blog&#x2F;source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可<br>保存，命名为CNAME ，注意保存成<strong>所有文件</strong>而不是<strong>txt文件</strong><br>完成这三步，进入blog目录中，按住shift键右击打开命令行，依次输入：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>

<p>这时候打开浏览器在地址栏输入你的个性化域名将会直接进入你自己搭建的网站。<br>  <br>  <br></p>
<h3 id="8-更换主题"><a href="#8-更换主题" class="headerlink" title="8.更换主题"></a><strong>8.更换主题</strong></h3><p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：<a class="link"   href="https://link.zhihu.com/?target=https://hexo.io/themes/" >Themes <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 我自己使用的是Redefine主题，具体安装配置看主题官网：<a class="link"   href="https://redefine-docs.ohevan.com/getting-started" >Redefine <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>  <br>  <br></p>
<h3 id="9-初识Markdown语法"><a href="#9-初识Markdown语法" class="headerlink" title="9.初识Markdown语法"></a><strong>9.初识Markdown语法</strong></h3><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于html已经算是轻量级语言，像有道云笔记也支持Markdown写作。并且Markdown完全兼容html，也就是可以在文章里直接插入html代码。比如给博文添加音乐，就可以直接把音乐的外链html代码插入文章中。具体语法参看：<a class="link"   href="https://link.zhihu.com/?target=http://www.appinn.com/markdown/" >Markdown 语法说明(简体中文版) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 可以说十分钟就可以入门。当然，工欲善其事必先利其器，选择一个好的Markdown编辑器也是非常重要的，这里推荐<a class="link"   href="https://link.zhihu.com/?target=http://code52.org/DownmarkerWPF/" >MarkPad <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 和<a class="link"   href="https://link.zhihu.com/?target=http://www.markdownpad.com/" >The Markdown Editor for Windows <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ，这是带有预览效果的编辑器，也可以使用本地的文本编辑器，更多的Markdown的语法与编辑器自己可以搜索了解。<br>  <br>  <br></p>
<h3 id="10-发布文章"><a href="#10-发布文章" class="headerlink" title="10.发布文章"></a><strong>10.发布文章</strong></h3><p>我们开始正式发布上线博客文章，在命令行中输入：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;博客名字&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 <strong>博客名字.md</strong> 文件，使用Markdown编辑器打开，就可以开始你的个人博客之旅了，Markdown常用的样式也就十来种，完全能够满足一般博文的样式要求，这是我的一篇博文内容示例<br>  <br>  <br></p>
<h3 id="11-最后"><a href="#11-最后" class="headerlink" title="11.最后"></a><strong>11.最后</strong></h3><p>完成上述的内容基本就没什么问题了，具体的主题配置可以根据官网的介绍配置</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/09/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>Ubuntu 上安装和使用git和github.md</title>
    <url>/2023/09/23/ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8git%E5%92%8Cgithub/</url>
    <content><![CDATA[<h1 id="Ubuntu-上安装和使用git和github"><a href="#Ubuntu-上安装和使用git和github" class="headerlink" title="Ubuntu 上安装和使用git和github"></a>Ubuntu 上安装和使用git和github</h1><p><strong>1、在Linux上安装Git</strong></p>
<p>下载并安装Git：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></div>

<p><strong>2、配置GitHub</strong></p>
<p>请使用下面的两条命令，并确保用你自己的GitHub 用户名替换 user_name，用你创建 GitHub 账户的电子邮件替换 email_id。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">name</span> <span class="string">&quot;user_name&quot;</span></span><br><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">email</span> <span class="string">&quot;email_id&quot;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>3、创建本地仓库</strong></p>
<p>在你的系统上创建一个目录。它将会被作为本地仓库使用，稍后它会被推送到 GitHub 的远程仓库。请使用如下命令：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init Mytest</span><br></pre></td></tr></table></figure></div>

<p>如果目录被成功创建，你会看到如下信息：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Initialized</span> empty <span class="title class_">Git</span> repository <span class="keyword">in</span> /home/akshay/<span class="title class_">Mytest</span>/.<span class="property">git</span>/</span><br></pre></td></tr></table></figure></div>

<p><strong>4、新建一个 README 文件来描述仓库</strong></p>
<p>现在创建一个 README 文件并输入一些文本，如 “this is git setup on linux”。README 文件一般用于描述这个仓库用来放置什么内容或这个项目是关于什么的。例如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gedit README</span><br></pre></td></tr></table></figure></div>

<p>你可以使用任何文本编辑器。我喜欢使用 gedit。README 文件的内容可以为：</p>
<p><strong>This is a git repo</strong></p>
<p><strong>5、将仓库里的文件加入一个索引</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add README</span><br></pre></td></tr></table></figure></div>

<p><strong>6、将所作的改动加入索引</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;some_message&quot;</span><br></pre></td></tr></table></figure></div>

<p><strong>7、在 GitHub 上创建一个仓库</strong></p>
<p>在 GitHub 上创建一个仓库。请注意仓库的名字必须和你本地创建的仓库的名字严格一致。在这个例子里是 “Mytest”。</p>
<p>请注意：请确保在运行下列命令前替换了路径中的 “user_name” 和 “Mytest” 为你的 GitHub 用户名和目录名！</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/user_name/Mytest.git&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>8、将本地仓库里的文件推送到 GitHub 仓库</strong></p>
<p>最后一步是用下列的命令将本地仓库的内容推送到远程仓库（GitHub）：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></div>

<p>当提示登录名和密码时键入登录名和密码 </p>
]]></content>
  </entry>
  <entry>
    <title>ubuntu安装Note.js.md</title>
    <url>/2023/09/23/ubuntu%E5%AE%89%E8%A3%85Note-js/</url>
    <content><![CDATA[<h1 id="ubuntu安装Note-js"><a href="#ubuntu安装Note-js" class="headerlink" title="ubuntu安装Note.js"></a>ubuntu安装Note.js</h1><h4 id="一-从-NodeSource-中安装-Node-js-和-npm"><a href="#一-从-NodeSource-中安装-Node-js-和-npm" class="headerlink" title="一.从 NodeSource 中安装 Node.js 和 npm"></a>一.从 NodeSource 中安装 Node.js 和 npm</h4><p>nodeSource是一个公司，使用nodeSource软件源可以自己选择版本</p>
<p>1.以 sudo 用户身份运行下面的命令，这里下载的是note.js_12,下载并执行 NodeSource 安装脚本：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -</span><br></pre></td></tr></table></figure></div>

<p>这个脚本将会添加 NodeSource 的签名 key 到你的系统，创建一个 apt 源文件，安装必备的软件包，并且刷新 apt 缓存。</p>
<p>2.NodeSource源启用成功后，安装Node.js和npm:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install nodejs</span><br></pre></td></tr></table></figure></div>

<p>nodejs 软件包同时包含<code>node</code>和<code>npm</code>二进制包。<br>3）验证 Node.js 和 npm 是否正确安装。打印它们的版本号：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">node --version</span><br></pre></td></tr></table></figure></div>

]]></content>
  </entry>
</search>
